{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/zkyzno/Desktop/App/ReactNative/app-qaot/component/Button.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport var Button = function (_Component) {\n  _inherits(Button, _Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Button, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          navigation = _this$props.navigation,\n          color = _this$props.color,\n          text = _this$props.text,\n          page = _this$props.page;\n\n      var checkColor = function checkColor() {\n        if (color === 'grey') {\n          return {\n            bgColor: '#E2E2E2',\n            textColor: '#888888',\n            shadow: 0\n          };\n        } else {\n          return {\n            bgColor: '#4472C4',\n            textColor: '#ffffff',\n            shadow: 1\n          };\n        }\n      };\n\n      return React.createElement(View, {\n        style: [styles.btn, {\n          display: 'flex',\n          flexDirection: 'row'\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: [styles.btnText, {\n          fontFamily: 'kanit-medium',\n          backgroundColor: checkColor().bgColor,\n          color: checkColor().textColor,\n          textShadowOffset: {\n            width: checkColor().shadow,\n            height: checkColor().shadow\n          }\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 17\n        }\n      }, text));\n    }\n  }]);\n\n  return Button;\n}(Component);\nvar styles = StyleSheet.create({\n  btn: {\n    borderRadius: 100,\n    textAlign: 'center',\n    overflow: 'hidden',\n    marginBottom: 10,\n    minWidth: 280,\n    width: '100%'\n  },\n  btnText: {\n    fontSize: 20,\n    padding: 15,\n    paddingLeft: 10,\n    paddingRight: 10,\n    textAlign: 'center',\n    color: '#fff',\n    textShadowColor: 'rgba(0, 0, 0, 0.5)',\n    textShadowOffset: {\n      width: 1,\n      height: 1\n    },\n    textShadowRadius: 1,\n    flex: 4,\n    textAlignVertical: 'auto',\n    justifyContent: 'center'\n  }\n});","map":{"version":3,"sources":["/Users/zkyzno/Desktop/App/ReactNative/app-qaot/component/Button.js"],"names":["React","Component","Button","props","navigation","color","text","page","checkColor","bgColor","textColor","shadow","styles","btn","display","flexDirection","btnText","fontFamily","backgroundColor","textShadowOffset","width","height","StyleSheet","create","borderRadius","textAlign","overflow","marginBottom","minWidth","fontSize","padding","paddingLeft","paddingRight","textShadowColor","textShadowRadius","flex","textAlignVertical","justifyContent"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;AAGA,WAAaC,MAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,6BACa;AAAA,wBACqC,KAAKC,KAD1C;AAAA,UACGC,UADH,eACGA,UADH;AAAA,UACeC,KADf,eACeA,KADf;AAAA,UACsBC,IADtB,eACsBA,IADtB;AAAA,UAC4BC,IAD5B,eAC4BA,IAD5B;;AAGL,UAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,YAAGH,KAAK,KAAG,MAAX,EAAmB;AACf,iBAAO;AAAEI,YAAAA,OAAO,EAAE,SAAX;AAAsBC,YAAAA,SAAS,EAAE,SAAjC;AAA4CC,YAAAA,MAAM,EAAE;AAApD,WAAP;AACH,SAFD,MAEO;AACH,iBAAO;AAAEF,YAAAA,OAAO,EAAE,SAAX;AAAsBC,YAAAA,SAAS,EAAE,SAAjC;AAA4CC,YAAAA,MAAM,EAAE;AAApD,WAAP;AACH;AACJ,OAND;;AAQA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACC,MAAM,CAACC,GAAR,EAAa;AAACC,UAAAA,OAAO,EAAE,MAAV;AAAkBC,UAAAA,aAAa,EAAE;AAAjC,SAAb,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACH,MAAM,CAACI,OAAR,EAAiB;AAACC,UAAAA,UAAU,EAAC,cAAZ;AAA4BC,UAAAA,eAAe,EAAEV,UAAU,GAAGC,OAA1D;AAAmEJ,UAAAA,KAAK,EAAEG,UAAU,GAAGE,SAAvF;AAAkGS,UAAAA,gBAAgB,EAAE;AAACC,YAAAA,KAAK,EAAEZ,UAAU,GAAGG,MAArB;AAA6BU,YAAAA,MAAM,EAAEb,UAAU,GAAGG;AAAlD;AAApH,SAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAgNL,IAAhN,CADJ,CADJ;AAKH;AAjBL;;AAAA;AAAA,EAA4BL,SAA5B;AAoBA,IAAMW,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC7BV,EAAAA,GAAG,EAAE;AACDW,IAAAA,YAAY,EAAC,GADZ;AAEDC,IAAAA,SAAS,EAAE,QAFV;AAGDC,IAAAA,QAAQ,EAAE,QAHT;AAIDC,IAAAA,YAAY,EAAE,EAJb;AAKDC,IAAAA,QAAQ,EAAE,GALT;AAMDR,IAAAA,KAAK,EAAE;AANN,GADwB;AAS7BJ,EAAAA,OAAO,EAAE;AAELa,IAAAA,QAAQ,EAAE,EAFL;AAGLC,IAAAA,OAAO,EAAE,EAHJ;AAILC,IAAAA,WAAW,EAAE,EAJR;AAKLC,IAAAA,YAAY,EAAE,EALT;AAMLP,IAAAA,SAAS,EAAE,QANN;AAOLpB,IAAAA,KAAK,EAAE,MAPF;AAQL4B,IAAAA,eAAe,EAAE,oBARZ;AASLd,IAAAA,gBAAgB,EAAE;AAACC,MAAAA,KAAK,EAAE,CAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KATb;AAULa,IAAAA,gBAAgB,EAAE,CAVb;AAWLC,IAAAA,IAAI,EAAE,CAXD;AAYLC,IAAAA,iBAAiB,EAAE,MAZd;AAaLC,IAAAA,cAAc,EAAE;AAbX;AAToB,CAAlB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { Text, View, TouchableOpacity, StyleSheet} from 'react-native';\n\nexport class Button extends Component {\n    render() {\n        const { navigation, color, text, page } = this.props;\n\n        const checkColor = () => {\n            if(color==='grey') {\n                return { bgColor: '#E2E2E2', textColor: '#888888', shadow: 0 };\n            } else {\n                return { bgColor: '#4472C4', textColor: '#ffffff', shadow: 1 };\n            }\n        }\n\n        return (\n            <View style={[styles.btn, {display: 'flex', flexDirection: 'row'}]}>\n                <Text style={[styles.btnText, {fontFamily:'kanit-medium', backgroundColor: checkColor().bgColor, color: checkColor().textColor, textShadowOffset: {width: checkColor().shadow, height: checkColor().shadow}}]}>{text}</Text>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    btn: {\n        borderRadius:100,\n        textAlign: 'center',\n        overflow: 'hidden',\n        marginBottom: 10,\n        minWidth: 280,\n        width: '100%',\n    },\n    btnText: {\n        // height: 50,\n        fontSize: 20,\n        padding: 15,\n        paddingLeft: 10,\n        paddingRight: 10,\n        textAlign: 'center',\n        color: '#fff',\n        textShadowColor: 'rgba(0, 0, 0, 0.5)',\n        textShadowOffset: {width: 1, height: 1},\n        textShadowRadius: 1,\n        flex: 4,\n        textAlignVertical: 'auto',\n        justifyContent: 'center'\n    }\n})\n"]},"metadata":{},"sourceType":"module"}